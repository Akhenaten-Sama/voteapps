{"version":3,"sources":["components/cardPanel/cardPanel.js","components/ProgressBar/progressbar.js","components/Main/main.js","App.js","serviceWorker.js","index.js"],"names":["CardPanel","imgUrl","name","total","num","color","idx","handleIncrease","handleReduce","className","alt","src","onClick","Progressbar","length","style","width","Main","state","list","i","setState","map","item","j","console","log","handleDecrease","this","obj","key","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3701c6cf.chunk.js","sourcesContent":["import React from 'react';\r\nimport './cardPanel.scss';\r\nconst CardPanel = ({imgUrl, name, total, num, color, idx, handleIncrease, handleReduce})=> {\r\n\r\n    const increase = ()=> {\r\n        if (total>0){\r\n            handleIncrease(idx)\r\n        }\r\n    }\r\n\r\n    const decrease = ()=> {\r\n        if (total<15&num>0){\r\n            handleReduce(idx)\r\n        }\r\n    }\r\n\r\n    \r\n    \r\n    return (<div className= {`cardpanel ${color}`}>\r\n    <h4 className='card-name' >{name}</h4>   \r\n    <img className='card-image' alt=''src={imgUrl} />\r\n    <div className='num'> <span><button onClick={decrease}>-</button> </span>{num} <span> <button onClick={increase}>+</button></span></div>\r\n   </div>)\r\n\r\n} \r\n\r\nexport default CardPanel","import React from 'react';\r\nimport './progress.scss'\r\n\r\nconst Progressbar = ({total})=>{\r\n   const length = total * 6.667\r\nreturn (<div className='container'>\r\n    <div style={{width: `${length}%`}} className= 'progress'>\r\n    <span>\r\n    </span>\r\n    </div>\r\n    </div>)\r\n}\r\n\r\nexport default Progressbar","import React from 'react';\r\nimport CardPanel from '../cardPanel/cardPanel'\r\nimport Progressbar from '../ProgressBar/progressbar'\r\nimport './cards.scss'\r\n\r\nclass Main extends React.Component{\r\n    state ={\r\n        list:[\r\n            {name:'Laolu', imgUrl:'https://images.unsplash.com/photo-1574158622682-e40e69881006?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1400&q=80', num:0, color:'green'},\r\n            {name:'Izu', imgUrl:'https://images.unsplash.com/photo-1574158622682-e40e69881006?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1400&q=80', num:0, color:'red'},\r\n            {name:'SegunFlames', imgUrl:'https://images.unsplash.com/photo-1574158622682-e40e69881006?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1400&q=80', num:0, color:'blue'}, \r\n            {name:'Dayo', imgUrl:'https://images.unsplash.com/photo-1574158622682-e40e69881006?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1400&q=80', num:0, color: 'pink'},\r\n            {name:'Shomz', imgUrl:'https://images.unsplash.com/photo-1574158622682-e40e69881006?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1400&q=80', num:0, color:'gray'},\r\n            {name:'Wiz', imgUrl:'https://images.unsplash.com/photo-1574158622682-e40e69881006?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1400&q=80', num:0, color:'orange'},\r\n            {name:'Mac', imgUrl:'https://images.unsplash.com/photo-1574158622682-e40e69881006?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1400&q=80', num:0, color:'yellow'},\r\n            \r\n            \r\n            \r\n        ],\r\n        total:15\r\n    } \r\n\r\n\r\nhandleIncrease = (i)=> {\r\n  this.setState(state=>{\r\n      const list = state.list.map((item, j)=> {\r\n          if(j===i){\r\n            console.log(item.num)\r\n               item.num++\r\n              return item\r\n              \r\n          } else {\r\n            return  item\r\n          }\r\n          \r\n      })\r\n      return {\r\n          \r\n         list,\r\n          total:state.total-1\r\n         \r\n      }\r\n})\r\n}\r\n\r\nhandleDecrease = (i)=> {\r\n    this.setState(state=>{\r\n        const list = state.list.map((item, j)=> {\r\n            if(j===i){\r\n              \r\n                 if(item.num>0){\r\n                     item.num--\r\n                     \r\n                 }\r\n                return item\r\n                \r\n                \r\n            } else {\r\n              return  item\r\n            }\r\n            \r\n        })\r\n        return {\r\n            \r\n           list,\r\n         total:state.total+1\r\n           \r\n        }\r\n  })\r\n  }\r\n\r\nrender(){\r\n\r\n    console.log(this.state.total)\r\n    return ( <div className='wrapper'>\r\n\r\n        <div className='total'>\r\n        <h2 className='heading'>Total Votes Left </h2>\r\n        <h4 className='number'>{this.state.total}</h4>\r\n        <Progressbar total = {this.state.total}/>\r\n        </div>\r\n        <div className='cards'>\r\n        { \r\n            this.state.list.map(\r\n                (obj, idx)=> <CardPanel \r\n                 key={idx} \r\n                 name={obj.name} \r\n                 imgUrl={obj.imgUrl}\r\n                 num={obj.num}\r\n                 idx={idx}\r\n                 color={obj.color}\r\n                 total={this.state.total}\r\n                 handleIncrease={this.handleIncrease}\r\n                 handleReduce ={this.handleDecrease}\r\n                 /> )\r\n                \r\n                 \r\n                }\r\n        </div>\r\n        \r\n        </div> )\r\n}\r\n\r\n}\r\n\r\nexport default Main","import React from 'react';\nimport Main from './components/Main/main'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n  <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}